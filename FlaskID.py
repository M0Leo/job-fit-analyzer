# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mzahaF8WFuGR2a0o75AgYpUQOK12-oP3
"""

from flask import Flask, request, jsonify
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import random

app = Flask(__name__)

file_path = 'jobss.csv'
jobs_data = pd.read_csv(file_path)
jobs_data.dropna(subset=['Job Title'], inplace=True)


tfidf = TfidfVectorizer()
X = tfidf.fit_transform(jobs_data['Key Skills'].astype(str))

# Training for Job Titles
y_title = jobs_data['Job Title']
X_train_title, X_test_title, y_train_title, y_test_title = train_test_split(X, y_title, test_size=0.2, random_state=40)
y_train_title = y_train_title.fillna('Unknown')
y_test_title = y_test_title.fillna('Unknown')
model_title = RandomForestClassifier(random_state=40)
model_title.fit(X_train_title, y_train_title)

# Training for Job Locations
y_location = jobs_data['Location']
X_train_location, X_test_location, y_train_location, y_test_location = train_test_split(X, y_location, test_size=0.2, random_state=42)
y_train_location = y_train_location.fillna('Unknown')
y_test_location = y_test_location.fillna('Unknown')
model_location = RandomForestClassifier(random_state=42)
model_location.fit(X_train_location, y_train_location)

def predict_job_title_and_location(Skills, top_n=5, relevance_threshold=0.08):
    skills_transformed = tfidf.transform([Skills.lower()])

    # Predict Job Title
    probs_title = model_title.predict_proba(skills_transformed)[0]
    top_n_indices_title = np.argsort(probs_title)[-top_n:]
    top_n_probs_title = probs_title[top_n_indices_title]
    relevant_titles = [model_title.classes_[i] for i, prob in zip(top_n_indices_title, top_n_probs_title) if prob >= relevance_threshold]
    predicted_title = random.choice(relevant_titles) if relevant_titles else 'No relevant title found'

    # Predict Job Location
    probs_location = model_location.predict_proba(skills_transformed)[0]
    top_n_indices_location = np.argsort(probs_location)[-top_n:]
    predicted_location = random.choice([model_location.classes_[i] for i in top_n_indices_location])

    return predicted_title, predicted_location

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    results = []

    for job in data['jobs']:
        job_id = job['id']
        job_title = job['title']
        job_location = job['location']

        predicted_title, predicted_location = predict_job_title_and_location(job_title)
        if job_title == predicted_title or job_location == predicted_location:
            results.append({'id': job_id})

    return jsonify(results)

if __name__ == '__main__':
    app.run(debug=True)
