generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  role          Role           @default(STANDARD)
  accounts      Account[]
  profile       Profile?
  jobs          Job[]
  applications  Applicantion[]
  companies     Company[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Job {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  location    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  type        JOB_TYPE       @default(FullTime)
  status      JOB_STATUS     @default(Active)
  applicants  Applicantion[]
  company     Company        @relation(fields: [companyId], references: [id])
  companyId   Int
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Applicantion {
  id          Int      @id @default(autoincrement())
  jobId       Int
  userId      String
  status      Status   @default(PENDING)
  resume      String
  coverLetter String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id])
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  website     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [recruiterId], references: [id])
  recruiterId String
  jobs        Job[]
}

model Profile {
  id          Int          @id @default(autoincrement())
  userId      String
  bio         String?
  location    String?
  website     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  skills      Skill[]
  languages   Language[]
  experiences Experience[]
  educations  Education[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Skill {
  id       Int       @id @default(autoincrement())
  name     String
  profiles Profile[]

  @@unique([name])
}

model Language {
  id      Int       @id @default(autoincrement())
  name    String
  profile Profile[]

  @@unique([name])
}

model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  company     String
  location    String
  from        DateTime
  to          DateTime
  current     Boolean
  description String
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   Int
}

model Education {
  id          Int      @id @default(autoincrement())
  school      String
  degree      String
  field       String
  from        DateTime
  to          DateTime
  current     Boolean
  description String
  gpa         Float?
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   Int
}

enum Role {
  ADMIN
  STANDARD
}

enum JOB_STATUS {
  Expired
  Active
  Archived
}

enum JOB_TYPE {
  FullTime
  PartTime
  Contract
  Internship
  Temporary
  Volunteer
}
