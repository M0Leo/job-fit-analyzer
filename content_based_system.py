# -*- coding: utf-8 -*-
"""Content_Based_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/M0Leo/job-fit-analyzer/blob/model-Ml/Content_Based_System.ipynb
"""

!pip install numpy pandas scikit-learn

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from sklearn.metrics import accuracy_score

file_path = 'jobss.csv'
jobs_data = pd.read_csv(file_path)

jobs_data.dropna(subset=['Job Title'], inplace=True)

tfidf = TfidfVectorizer()
X = tfidf.fit_transform(jobs_data['Key Skills'].astype(str))

y_title = jobs_data['Job Title']
X_train_title, X_test_title, y_train_title, y_test_title = train_test_split(X, y_title, test_size=0.2, random_state=40)

y_train_title = y_train_title.fillna('Unknown')
y_test_title = y_test_title.fillna('Unknown')

model_title =RandomForestClassifier(random_state=40)
model_title.fit(X_train_title, y_train_title)
y_pred_title = model_title.predict(X_test_title)
accuracy_title = accuracy_score(y_test_title, y_pred_title)
print("Accuracy Score for Job Titles:", accuracy_title)

y_location = jobs_data['Location']
X_train_location, X_test_location, y_train_location, y_test_location = train_test_split(X, y_location, test_size=0.2, random_state=42)

y_train_location = y_train_location.fillna('Unknown')
y_test_location = y_test_location.fillna('Unknown')

model_location = RandomForestClassifier(random_state=42)
model_location.fit(X_train_location, y_train_location)
y_pred_location = model_location.predict(X_test_location)
accuracy_location = accuracy_score(y_test_location, y_pred_location)
print("Accuracy Score for Job Locations:", accuracy_location)

def predict_job_title_and_location(Skills, top_n=5, relevance_threshold=0.08):
    skills_transformed = tfidf.transform([Skills.lower()])

    probs_title = model_title.predict_proba(skills_transformed)[0]
    top_n_indices_title = np.argsort(probs_title)[-top_n:]
    top_n_probs_title = probs_title[top_n_indices_title]
    relevant_titles = [model_title.classes_[i] for i, prob in zip(top_n_indices_title, top_n_probs_title) if prob >= relevance_threshold]

    predicted_title = np.random.choice(relevant_titles) if relevant_titles else 'No relevant title found'

    probs_location = model_location.predict_proba(skills_transformed)[0]
    top_n_indices_location = np.argsort(probs_location)[-top_n:]
    predicted_location = np.random.choice([model_location.classes_[i] for i in top_n_indices_location])

    return predicted_title, predicted_location

example_skills = "HTML"
predicted_title, predicted_location = predict_job_title_and_location(example_skills)
print("Predicted Job Title:", predicted_title)
print("Predicted Location:", predicted_location)